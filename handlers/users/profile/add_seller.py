import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hbold

from keyboards.inline.profile_keyboard.add_delete_seller import fail_add_seller_keyboard, seller_added_keyboard
from loader import dp
from states import States
from utils.db_api.quick_commands.seller_inquiries import select_seller_by_api_x64, add_seller, update_trail_fail
from utils.db_api.quick_commands.user_inquiries import update_user_seller
from utils.misc.start_by_time import first_scan
from utils.wb_api.method_warehouse import valid_token


@dp.message_handler(state=States.CONNECTING_API)
async def connection_api_x64(message: types.Message, state: FSMContext):
    status = await valid_token(message.text)
    if status == 200:
        await state.finish()
        api_x64 = message.text
        seller = await select_seller_by_api_x64(api_x64)
        if seller:
            await update_user_seller(seller=seller, user_id=message.from_user.id)
        else:
            seller = await add_seller(api_x64=api_x64, reserve=14, export=True, bot_enable=False,
                                      name=message.from_user.full_name, tarif=False)
            await update_user_seller(seller=seller, user_id=message.from_user.id)
            await first_scan(seller.id, seller.api_x64)
            await update_trail_fail(seller_id=seller.id)
        await message.answer(
            "\n".join(
                [
                    f'üë§ {hbold("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞")}\n',
                    f'‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {hbold("API-–∫–ª—é—á x64")} –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n',
                    f'üöô –ï—Å–ª–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –ø–æ —Å—Ö–µ–º–µ {hbold("FBS")} (–ø—Ä–æ–¥–∞–∂–∞ —Å–æ —Å–∫–ª–∞–¥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π API-–∫–ª—é—á, '
                    f'—á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã.\n'
                ]
            ), reply_markup=seller_added_keyboard(seller.id)
        )
    elif status == 400 or status == 500:
        await message.answer(
            "\n".join(
                [
                    f'üë§ {hbold("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞")}',
                    f'‚è± {datetime.datetime.now().time().strftime("%H:%M:%S")}\n',
                    f'‚ùå{hbold("–û—à–∏–±–∫–∞!")}API-–∫–ª—é—á (x64) –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!\n',
                    f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –∑–∞–Ω–æ–≤–æ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:',

                ]
            ), reply_markup=fail_add_seller_keyboard
        )
    else:
        await message.answer(
            "\n".join(
                [
                    f'üë§ {hbold("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞")}',
                    f'‚è± {datetime.datetime.now().time().strftime("%H:%M:%S")}\n',
                    f'‚ùå{hbold("–û—à–∏–±–∫–∞!")} –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–µ—Ä–≤–µ—Ä–∞ Wildberries –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç, '
                    f'–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!\n',

                ]
            ), reply_markup=fail_add_seller_keyboard
        )
